buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:${grailsVersion}"
        classpath "org.grails.plugins:hibernate5:${gormVersion - '.RELEASE'}"
        classpath 'org.grails.plugins:views-gradle:1.1.6'
        classpath "com.moowork.gradle:gradle-node-plugin:${gradleNodeVersion}"
        classpath 'net.linguica.gradle:maven-settings-plugin:0.5'
    }
}

ext {
    dataShowcaseVersion = '1.0.0'
    nodeVersion = '7.10.1'
    modelMapperVersion = '1.1.0'
}

version = dataShowcaseVersion
group = 'nl.thehyve'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.grails.grails-web'
apply plugin: 'com.moowork.node'
apply plugin: 'net.linguica.maven-settings'
apply plugin: 'maven-publish'

repositories {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.grails.org/grails/core' }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-autoconfigure'
    compile 'org.grails:grails-core'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.grails.plugins:spring-security-core:3.1.1'
    compile 'org.grails:grails-plugin-url-mappings'
    compile 'org.grails:grails-plugin-rest'
    compile 'org.grails:grails-plugin-codecs'
    compile 'org.grails:grails-plugin-interceptors'
    compile 'org.grails:grails-plugin-services'
    compile 'org.grails:grails-plugin-datasource'
    compile 'org.grails:grails-plugin-databinding'
    compile 'org.grails:grails-web-boot'
    compile 'org.grails:grails-logging'
    compile 'org.grails.plugins:cache'
    compile 'org.grails.plugins:async'
    compile 'org.grails.plugins:hibernate5'
    compile 'org.hibernate:hibernate-core:5.1.5.Final'
    compile 'org.grails.plugins:views-json'
    compile 'org.grails.plugins:views-json-templates'
    compile "org.modelmapper:modelmapper:${modelMapperVersion}"
    console 'org.grails:grails-console'
    profile 'org.grails.profiles:angular'
    runtime 'org.glassfish.web:el-impl:2.1.2-b03'
    runtime 'com.h2database:h2'
    runtime 'org.postgresql:postgresql:9.3-1100-jdbc41'
    runtime 'org.apache.tomcat:tomcat-jdbc'
    testCompile 'org.grails:grails-gorm-testing-support'
    testCompile 'org.grails.plugins:geb'
    testCompile 'org.grails:grails-datastore-rest-client'
    testCompile 'org.grails:grails-web-testing-support'
    testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1'
    testRuntime 'net.sourceforge.htmlunit:htmlunit:2.18'
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

node {
    version = nodeVersion
    download = true
    nodeModulesDir = file('src/main/user-interface')
}

task buildUserInterfaceProd(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = 'Builds the user interface assets'
    args = ['run', 'buildProd']
}
war.dependsOn(buildUserInterfaceProd)
task buildUserInterfaceDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = 'Builds the user interface assets'
    args = ['run', 'buildDev']
}
bootRun.dependsOn(buildUserInterfaceDev)

task buildUserInterface(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = 'Builds and watches the user interface assets for rebuilding'
    args = ['run', 'build']
}

task userInterfaceTest(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'verification'
    description = 'Executes user interface unit tests'
    args = ['run', 'test']
}
check.dependsOn(userInterfaceTest)

clean {
    delete fileTree(dir: 'src/main/webapp')
}

bootRun {
    systemProperties = System.properties
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

war {
    webInf {
        with copySpec({
            from 'src/main/resources/images'
            into 'images'
        })
    }
}

task executableWar(type: Copy) {
    from "${libsDir}/${project.name}-${project.version}.war"
    into "${distsDir}"
}
executableWar.dependsOn 'bootRepackage'


publishing {
    repositories {
        maven {
            name 'nl.thehyve.nexus'
            url 'https://repo.thehyve.nl/content/repositories/snapshots/'
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifact file("${distsDir}/${project.name}-${project.version}.war") // Publish the output of the executableWar task
        }
    }
}
publishToMavenLocal.dependsOn 'executableWar'
publish.dependsOn 'executableWar'

bootRun {
    jvmArgs = ['-Xmx4096m']
}
